//----------------------
// <auto-generated>
//     Generated using the NSwag toolchain v14.0.0.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0)) (http://NSwag.org)
// </auto-generated>
//----------------------

/* tslint:disable */
/* eslint-disable */
// ReSharper disable InconsistentNaming

import { mergeMap as _observableMergeMap, catchError as _observableCatch } from 'rxjs/operators';
import { Observable, throwError as _observableThrow, of as _observableOf } from 'rxjs';
import { Injectable, Inject, Optional, InjectionToken } from '@angular/core';
import { HttpClient, HttpHeaders, HttpResponse, HttpResponseBase } from '@angular/common/http';

export const API_BASE_URL = new InjectionToken<string>('API_BASE_URL');

@Injectable()
export class ApiClient {
    private http: HttpClient;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(@Inject(HttpClient) http: HttpClient, @Optional() @Inject(API_BASE_URL) baseUrl?: string) {
        this.http = http;
        this.baseUrl = baseUrl ?? "";
    }

    /**
     * @param body (optional) 
     * @return Success
     */
    create(body: ClientDto | undefined): Observable<void> {
        let url_ = this.baseUrl + "/api/Client/Create";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_: any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            withCredentials: true,
            headers: new HttpHeaders({
                "Content-Type": "application/json",
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_: any) => {
            return this.processCreate(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processCreate(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<void>;
                }
            } else
                return _observableThrow(response_) as any as Observable<void>;
        }));
    }

    protected processCreate(response: HttpResponseBase): Observable<void> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
                (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); } }
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
                return _observableOf(null as any);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
                return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    /**
     * @param clientId (optional) 
     * @return Success
     */
    client(clientId: number | undefined): Observable<ClientDto> {
        let url_ = this.baseUrl + "/api/Client/Client?";
        if (clientId === null)
            throw new Error("The parameter 'clientId' cannot be null.");
        else if (clientId !== undefined)
            url_ += "clientId=" + encodeURIComponent("" + clientId) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_: any = {
            observe: "response",
            responseType: "blob",
            withCredentials: true,
            headers: new HttpHeaders({
                "Accept": "text/plain"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_: any) => {
            return this.processClient(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processClient(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<ClientDto>;
                }
            } else
                return _observableThrow(response_) as any as Observable<ClientDto>;
        }));
    }

    protected processClient(response: HttpResponseBase): Observable<ClientDto> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
                (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); } }
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
                let result200: any = null;
                let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
                result200 = ClientDto.fromJS(resultData200);
                return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
                return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    /**
     * @param body (optional) 
     * @return Success
     */
    update(body: ClientDto | undefined): Observable<void> {
        let url_ = this.baseUrl + "/api/Client/Update";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_: any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            withCredentials: true,
            headers: new HttpHeaders({
                "Content-Type": "application/json",
            })
        };

        return this.http.request("put", url_, options_).pipe(_observableMergeMap((response_: any) => {
            return this.processUpdate(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processUpdate(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<void>;
                }
            } else
                return _observableThrow(response_) as any as Observable<void>;
        }));
    }

    protected processUpdate(response: HttpResponseBase): Observable<void> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
                (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); } }
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
                return _observableOf(null as any);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
                return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    /**
     * @param body (optional) 
     * @return Success
     */
    delete(body: number | undefined): Observable<void> {
        let url_ = this.baseUrl + "/api/Client/Delete";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_: any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            withCredentials: true,
            headers: new HttpHeaders({
                "Content-Type": "application/json",
            })
        };

        return this.http.request("delete", url_, options_).pipe(_observableMergeMap((response_: any) => {
            return this.processDelete(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processDelete(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<void>;
                }
            } else
                return _observableThrow(response_) as any as Observable<void>;
        }));
    }

    protected processDelete(response: HttpResponseBase): Observable<void> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
                (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); } }
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
                return _observableOf(null as any);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
                return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    /**
     * @return Success
     */
    additionals(): Observable<ClientAdditionalsDto> {
        let url_ = this.baseUrl + "/api/Client/Additionals";
        url_ = url_.replace(/[?&]$/, "");

        let options_: any = {
            observe: "response",
            responseType: "blob",
            withCredentials: true,
            headers: new HttpHeaders({
                "Accept": "text/plain"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_: any) => {
            return this.processAdditionals(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processAdditionals(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<ClientAdditionalsDto>;
                }
            } else
                return _observableThrow(response_) as any as Observable<ClientAdditionalsDto>;
        }));
    }

    protected processAdditionals(response: HttpResponseBase): Observable<ClientAdditionalsDto> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
                (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); } }
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
                let result200: any = null;
                let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
                result200 = ClientAdditionalsDto.fromJS(resultData200);
                return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
                return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    /**
     * @param body (optional) 
     * @return Success
     */
    list(body: ClientPaginationDto | undefined): Observable<ClientViewDtoPaginationList> {
        let url_ = this.baseUrl + "/api/Client/List";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_: any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            withCredentials: true,
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "text/plain"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_: any) => {
            return this.processList(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processList(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<ClientViewDtoPaginationList>;
                }
            } else
                return _observableThrow(response_) as any as Observable<ClientViewDtoPaginationList>;
        }));
    }

    protected processList(response: HttpResponseBase): Observable<ClientViewDtoPaginationList> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
                (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); } }
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
                let result200: any = null;
                let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
                result200 = ClientViewDtoPaginationList.fromJS(resultData200);
                return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
                return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }
}

export class CitizenshipDto implements ICitizenshipDto {
    citizenshipId?: number;
    citizenshipName?: string | undefined;

    constructor(data?: ICitizenshipDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.citizenshipId = _data["citizenshipId"];
            this.citizenshipName = _data["citizenshipName"];
        }
    }

    static fromJS(data: any): CitizenshipDto {
        data = typeof data === 'object' ? data : {};
        let result = new CitizenshipDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["citizenshipId"] = this.citizenshipId;
        data["citizenshipName"] = this.citizenshipName;
        return data;
    }
}

export interface ICitizenshipDto {
    citizenshipId?: number;
    citizenshipName?: string | undefined;
}

export class CityDto implements ICityDto {
    cityId?: number;
    name?: string | undefined;

    constructor(data?: ICityDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.cityId = _data["cityId"];
            this.name = _data["name"];
        }
    }

    static fromJS(data: any): CityDto {
        data = typeof data === 'object' ? data : {};
        let result = new CityDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["cityId"] = this.cityId;
        data["name"] = this.name;
        return data;
    }
}

export interface ICityDto {
    cityId?: number;
    name?: string | undefined;
}

export class ClientAdditionalsDto implements IClientAdditionalsDto {
    disabilities?: DisabilityDto[] | undefined;
    citizenships?: CitizenshipDto[] | undefined;
    cities?: CityDto[] | undefined;
    familyStatuses?: FamilyStatusDto[] | undefined;

    constructor(data?: IClientAdditionalsDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            if (Array.isArray(_data["disabilities"])) {
                this.disabilities = [] as any;
                for (let item of _data["disabilities"])
                    this.disabilities!.push(DisabilityDto.fromJS(item));
            }
            if (Array.isArray(_data["citizenships"])) {
                this.citizenships = [] as any;
                for (let item of _data["citizenships"])
                    this.citizenships!.push(CitizenshipDto.fromJS(item));
            }
            if (Array.isArray(_data["cities"])) {
                this.cities = [] as any;
                for (let item of _data["cities"])
                    this.cities!.push(CityDto.fromJS(item));
            }
            if (Array.isArray(_data["familyStatuses"])) {
                this.familyStatuses = [] as any;
                for (let item of _data["familyStatuses"])
                    this.familyStatuses!.push(FamilyStatusDto.fromJS(item));
            }
        }
    }

    static fromJS(data: any): ClientAdditionalsDto {
        data = typeof data === 'object' ? data : {};
        let result = new ClientAdditionalsDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (Array.isArray(this.disabilities)) {
            data["disabilities"] = [];
            for (let item of this.disabilities)
                data["disabilities"].push(item.toJSON());
        }
        if (Array.isArray(this.citizenships)) {
            data["citizenships"] = [];
            for (let item of this.citizenships)
                data["citizenships"].push(item.toJSON());
        }
        if (Array.isArray(this.cities)) {
            data["cities"] = [];
            for (let item of this.cities)
                data["cities"].push(item.toJSON());
        }
        if (Array.isArray(this.familyStatuses)) {
            data["familyStatuses"] = [];
            for (let item of this.familyStatuses)
                data["familyStatuses"].push(item.toJSON());
        }
        return data;
    }
}

export interface IClientAdditionalsDto {
    disabilities?: DisabilityDto[] | undefined;
    citizenships?: CitizenshipDto[] | undefined;
    cities?: CityDto[] | undefined;
    familyStatuses?: FamilyStatusDto[] | undefined;
}

export class ClientDto implements IClientDto {
    clientId?: number | undefined;
    surname?: string | undefined;
    firstName?: string | undefined;
    lastName?: string | undefined;
    dateOfBirth!: Date;
    passportSeries?: string | undefined;
    passportNumber?: string | undefined;
    issuedBy!: string;
    dateOfIssue!: Date;
    identificationNumber?: string | undefined;
    placeOfBirth!: string;
    locationAddress!: string;
    cityId!: number;
    homePhone?: string | undefined;
    mobilePhone?: string | undefined;
    email?: string | undefined;
    company?: string | undefined;
    jobTitle?: string | undefined;
    registrationAddress!: string;
    citizenshipId!: number;
    disabilityId!: number;
    familyStatusId!: number;
    isPensioner?: boolean;
    monthIncome?: number | undefined;

    constructor(data?: IClientDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.clientId = _data["clientId"];
            this.surname = _data["surname"];
            this.firstName = _data["firstName"];
            this.lastName = _data["lastName"];
            this.dateOfBirth = _data["dateOfBirth"] ? new Date(_data["dateOfBirth"].toString()) : <any>undefined;
            this.passportSeries = _data["passportSeries"];
            this.passportNumber = _data["passportNumber"];
            this.issuedBy = _data["issuedBy"];
            this.dateOfIssue = _data["dateOfIssue"] ? new Date(_data["dateOfIssue"].toString()) : <any>undefined;
            this.identificationNumber = _data["identificationNumber"];
            this.placeOfBirth = _data["placeOfBirth"];
            this.locationAddress = _data["locationAddress"];
            this.cityId = _data["cityId"];
            this.homePhone = _data["homePhone"];
            this.mobilePhone = _data["mobilePhone"];
            this.email = _data["email"];
            this.company = _data["company"];
            this.jobTitle = _data["jobTitle"];
            this.registrationAddress = _data["registrationAddress"];
            this.citizenshipId = _data["citizenshipId"];
            this.disabilityId = _data["disabilityId"];
            this.familyStatusId = _data["familyStatusId"];
            this.isPensioner = _data["isPensioner"];
            this.monthIncome = _data["monthIncome"];
        }
    }

    static fromJS(data: any): ClientDto {
        data = typeof data === 'object' ? data : {};
        let result = new ClientDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["clientId"] = this.clientId;
        data["surname"] = this.surname;
        data["firstName"] = this.firstName;
        data["lastName"] = this.lastName;
        data["dateOfBirth"] = this.dateOfBirth ? this.dateOfBirth.toISOString() : <any>undefined;
        data["passportSeries"] = this.passportSeries;
        data["passportNumber"] = this.passportNumber;
        data["issuedBy"] = this.issuedBy;
        data["dateOfIssue"] = this.dateOfIssue ? this.dateOfIssue.toISOString() : <any>undefined;
        data["identificationNumber"] = this.identificationNumber;
        data["placeOfBirth"] = this.placeOfBirth;
        data["locationAddress"] = this.locationAddress;
        data["cityId"] = this.cityId;
        data["homePhone"] = this.homePhone;
        data["mobilePhone"] = this.mobilePhone;
        data["email"] = this.email;
        data["company"] = this.company;
        data["jobTitle"] = this.jobTitle;
        data["registrationAddress"] = this.registrationAddress;
        data["citizenshipId"] = this.citizenshipId;
        data["disabilityId"] = this.disabilityId;
        data["familyStatusId"] = this.familyStatusId;
        data["isPensioner"] = this.isPensioner;
        data["monthIncome"] = this.monthIncome;
        return data;
    }
}

export interface IClientDto {
    clientId?: number | undefined;
    surname?: string | undefined;
    firstName?: string | undefined;
    lastName?: string | undefined;
    dateOfBirth: Date;
    passportSeries?: string | undefined;
    passportNumber?: string | undefined;
    issuedBy: string;
    dateOfIssue: Date;
    identificationNumber?: string | undefined;
    placeOfBirth: string;
    locationAddress: string;
    cityId: number;
    homePhone?: string | undefined;
    mobilePhone?: string | undefined;
    email?: string | undefined;
    company?: string | undefined;
    jobTitle?: string | undefined;
    registrationAddress: string;
    citizenshipId: number;
    disabilityId: number;
    familyStatusId: number;
    isPensioner?: boolean;
    monthIncome?: number | undefined;
}

export class ClientPaginationDto implements IClientPaginationDto {
    skip?: number;
    take?: number;
    surname?: string | undefined;
    sortField?: ClientSortField;
    sortDirection?: SortDirection;

    constructor(data?: IClientPaginationDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.skip = _data["skip"];
            this.take = _data["take"];
            this.surname = _data["surname"];
            this.sortField = _data["sortField"];
            this.sortDirection = _data["sortDirection"];
        }
    }

    static fromJS(data: any): ClientPaginationDto {
        data = typeof data === 'object' ? data : {};
        let result = new ClientPaginationDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["skip"] = this.skip;
        data["take"] = this.take;
        data["surname"] = this.surname;
        data["sortField"] = this.sortField;
        data["sortDirection"] = this.sortDirection;
        return data;
    }
}

export interface IClientPaginationDto {
    skip?: number;
    take?: number;
    surname?: string | undefined;
    sortField?: ClientSortField;
    sortDirection?: SortDirection;
}

export enum ClientSortField {
    surname = 0,
}

export class ClientViewDto implements IClientViewDto {
    clientId?: number | undefined;
    surname?: string | undefined;
    firstName?: string | undefined;
    lastName?: string | undefined;
    dateOfBirth?: Date;
    passportSeries?: string | undefined;
    passportNumber?: string | undefined;
    issuedBy?: string | undefined;
    dateOfIssue?: Date;
    identificationNumber?: string | undefined;
    placeOfBirth?: string | undefined;
    locationAddress?: string | undefined;
    cityName?: string | undefined;
    homePhone?: string | undefined;
    mobilePhone?: string | undefined;
    email?: string | undefined;
    company?: string | undefined;
    jobTitle?: string | undefined;
    registrationAddress?: string | undefined;
    citizenshipName?: string | undefined;
    disabilityStatus?: string | undefined;
    familyStatus?: string | undefined;
    isPensioner?: boolean;
    monthIncome?: number | undefined;

    constructor(data?: IClientViewDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.clientId = _data["clientId"];
            this.surname = _data["surname"];
            this.firstName = _data["firstName"];
            this.lastName = _data["lastName"];
            this.dateOfBirth = _data["dateOfBirth"] ? new Date(_data["dateOfBirth"].toString()) : <any>undefined;
            this.passportSeries = _data["passportSeries"];
            this.passportNumber = _data["passportNumber"];
            this.issuedBy = _data["issuedBy"];
            this.dateOfIssue = _data["dateOfIssue"] ? new Date(_data["dateOfIssue"].toString()) : <any>undefined;
            this.identificationNumber = _data["identificationNumber"];
            this.placeOfBirth = _data["placeOfBirth"];
            this.locationAddress = _data["locationAddress"];
            this.cityName = _data["cityName"];
            this.homePhone = _data["homePhone"];
            this.mobilePhone = _data["mobilePhone"];
            this.email = _data["email"];
            this.company = _data["company"];
            this.jobTitle = _data["jobTitle"];
            this.registrationAddress = _data["registrationAddress"];
            this.citizenshipName = _data["citizenshipName"];
            this.disabilityStatus = _data["disabilityStatus"];
            this.familyStatus = _data["familyStatus"];
            this.isPensioner = _data["isPensioner"];
            this.monthIncome = _data["monthIncome"];
        }
    }

    static fromJS(data: any): ClientViewDto {
        data = typeof data === 'object' ? data : {};
        let result = new ClientViewDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["clientId"] = this.clientId;
        data["surname"] = this.surname;
        data["firstName"] = this.firstName;
        data["lastName"] = this.lastName;
        data["dateOfBirth"] = this.dateOfBirth ? this.dateOfBirth.toISOString() : <any>undefined;
        data["passportSeries"] = this.passportSeries;
        data["passportNumber"] = this.passportNumber;
        data["issuedBy"] = this.issuedBy;
        data["dateOfIssue"] = this.dateOfIssue ? this.dateOfIssue.toISOString() : <any>undefined;
        data["identificationNumber"] = this.identificationNumber;
        data["placeOfBirth"] = this.placeOfBirth;
        data["locationAddress"] = this.locationAddress;
        data["cityName"] = this.cityName;
        data["homePhone"] = this.homePhone;
        data["mobilePhone"] = this.mobilePhone;
        data["email"] = this.email;
        data["company"] = this.company;
        data["jobTitle"] = this.jobTitle;
        data["registrationAddress"] = this.registrationAddress;
        data["citizenshipName"] = this.citizenshipName;
        data["disabilityStatus"] = this.disabilityStatus;
        data["familyStatus"] = this.familyStatus;
        data["isPensioner"] = this.isPensioner;
        data["monthIncome"] = this.monthIncome;
        return data;
    }
}

export interface IClientViewDto {
    clientId?: number | undefined;
    surname?: string | undefined;
    firstName?: string | undefined;
    lastName?: string | undefined;
    dateOfBirth?: Date;
    passportSeries?: string | undefined;
    passportNumber?: string | undefined;
    issuedBy?: string | undefined;
    dateOfIssue?: Date;
    identificationNumber?: string | undefined;
    placeOfBirth?: string | undefined;
    locationAddress?: string | undefined;
    cityName?: string | undefined;
    homePhone?: string | undefined;
    mobilePhone?: string | undefined;
    email?: string | undefined;
    company?: string | undefined;
    jobTitle?: string | undefined;
    registrationAddress?: string | undefined;
    citizenshipName?: string | undefined;
    disabilityStatus?: string | undefined;
    familyStatus?: string | undefined;
    isPensioner?: boolean;
    monthIncome?: number | undefined;
}

export class ClientViewDtoPaginationList implements IClientViewDtoPaginationList {
    items?: ClientViewDto[] | undefined;
    totalCount?: number;

    constructor(data?: IClientViewDtoPaginationList) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            if (Array.isArray(_data["items"])) {
                this.items = [] as any;
                for (let item of _data["items"])
                    this.items!.push(ClientViewDto.fromJS(item));
            }
            this.totalCount = _data["totalCount"];
        }
    }

    static fromJS(data: any): ClientViewDtoPaginationList {
        data = typeof data === 'object' ? data : {};
        let result = new ClientViewDtoPaginationList();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (Array.isArray(this.items)) {
            data["items"] = [];
            for (let item of this.items)
                data["items"].push(item.toJSON());
        }
        data["totalCount"] = this.totalCount;
        return data;
    }
}

export interface IClientViewDtoPaginationList {
    items?: ClientViewDto[] | undefined;
    totalCount?: number;
}

export class DisabilityDto implements IDisabilityDto {
    disabilityId?: number;
    disabilityStatus?: string | undefined;

    constructor(data?: IDisabilityDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.disabilityId = _data["disabilityId"];
            this.disabilityStatus = _data["disabilityStatus"];
        }
    }

    static fromJS(data: any): DisabilityDto {
        data = typeof data === 'object' ? data : {};
        let result = new DisabilityDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["disabilityId"] = this.disabilityId;
        data["disabilityStatus"] = this.disabilityStatus;
        return data;
    }
}

export interface IDisabilityDto {
    disabilityId?: number;
    disabilityStatus?: string | undefined;
}

export class FamilyStatusDto implements IFamilyStatusDto {
    familyStatusId?: number;
    statusName?: string | undefined;

    constructor(data?: IFamilyStatusDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.familyStatusId = _data["familyStatusId"];
            this.statusName = _data["statusName"];
        }
    }

    static fromJS(data: any): FamilyStatusDto {
        data = typeof data === 'object' ? data : {};
        let result = new FamilyStatusDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["familyStatusId"] = this.familyStatusId;
        data["statusName"] = this.statusName;
        return data;
    }
}

export interface IFamilyStatusDto {
    familyStatusId?: number;
    statusName?: string | undefined;
}

export enum SortDirection {
    ascending = 0,
    descending = 1,
}

export class ApiException extends Error {
    override message: string;
    status: number;
    response: string;
    headers: { [key: string]: any; };
    result: any;

    constructor(message: string, status: number, response: string, headers: { [key: string]: any; }, result: any) {
        super();

        this.message = message;
        this.status = status;
        this.response = response;
        this.headers = headers;
        this.result = result;
    }

    protected isApiException = true;

    static isApiException(obj: any): obj is ApiException {
        return obj.isApiException === true;
    }
}

function throwException(message: string, status: number, response: string, headers: { [key: string]: any; }, result?: any): Observable<any> {
    if (result !== null && result !== undefined)
        return _observableThrow(result);
    else
        return _observableThrow(new ApiException(message, status, response, headers, null));
}

function blobToText(blob: any): Observable<string> {
    return new Observable<string>((observer: any) => {
        if (!blob) {
            observer.next("");
            observer.complete();
        } else {
            let reader = new FileReader();
            reader.onload = event => {
                observer.next((event.target as any).result);
                observer.complete();
            };
            reader.readAsText(blob);
        }
    });
}
